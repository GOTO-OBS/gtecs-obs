-- MySQL Script generated by MySQL Workbench
-- Thu Jun  8 09:53:35 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema goto_obs
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema goto_obs
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `goto_obs` DEFAULT CHARACTER SET utf8 ;
USE `goto_obs` ;

-- -----------------------------------------------------
-- Table `goto_obs`.`events`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`events` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`events` (
  `eventID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `source` VARCHAR(255) NOT NULL COMMENT 'LIGO, SWIFT etc.',
  `ivo` VARCHAR(255) NOT NULL,
  `skymap` VARCHAR(255) NULL,
  PRIMARY KEY (`eventID`),
  UNIQUE INDEX `ivo_UNIQUE` (`ivo` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `goto_obs`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`users` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`users` (
  `userKey` INT(11) NOT NULL AUTO_INCREMENT,
  `user_name` TEXT NOT NULL,
  `password` TEXT NOT NULL,
  `fullName` TEXT NOT NULL,
  PRIMARY KEY (`userKey`),
  UNIQUE INDEX `user_name_UNIQUE` (`user_name`(10) ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 24
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `goto_obs`.`surveys`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`surveys` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`surveys` (
  `surveyID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`surveyID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `goto_obs`.`survey_tiles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`survey_tiles` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`survey_tiles` (
  `tileID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `ra` FLOAT NOT NULL COMMENT 'decimal degrees',
  `decl` FLOAT NOT NULL COMMENT 'decimal degrees',
  `surveys_surveyID` INT NOT NULL,
  PRIMARY KEY (`tileID`),
  INDEX `fk_survey_tiles_surveys1_idx` (`surveys_surveyID` ASC),
  CONSTRAINT `fk_survey_tiles_surveys1`
    FOREIGN KEY (`surveys_surveyID`)
    REFERENCES `goto_obs`.`surveys` (`surveyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `goto_obs`.`event_tiles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`event_tiles` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`event_tiles` (
  `tileID` INT NOT NULL AUTO_INCREMENT,
  `ra` FLOAT NOT NULL,
  `decl` FLOAT NOT NULL,
  `probability` FLOAT NOT NULL,
  `unobserved_probability` FLOAT NOT NULL,
  `events_eventID` INT NOT NULL,
  `survey_tiles_tileID` INT NULL,
  PRIMARY KEY (`tileID`),
  INDEX `fk_event_tiles_events1_idx` (`events_eventID` ASC),
  INDEX `fk_event_tiles_survey_tiles1_idx` (`survey_tiles_tileID` ASC),
  CONSTRAINT `fk_event_tiles_events1`
    FOREIGN KEY (`events_eventID`)
    REFERENCES `goto_obs`.`events` (`eventID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_tiles_survey_tiles1`
    FOREIGN KEY (`survey_tiles_tileID`)
    REFERENCES `goto_obs`.`survey_tiles` (`tileID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `goto_obs`.`mpointings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`mpointings` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`mpointings` (
  `mpointingID` INT NOT NULL AUTO_INCREMENT,
  `status` ENUM('unscheduled', 'scheduled', 'completed', 'aborted', 'expired', 'deleted') NOT NULL DEFAULT 'unscheduled',
  `object` TEXT NOT NULL,
  `ra` FLOAT NOT NULL COMMENT 'decimal degrees',
  `decl` FLOAT NOT NULL COMMENT 'decimal degrees',
  `rank` INT(11) NOT NULL,
  `start_rank` INT(11) NOT NULL,
  `minAlt` FLOAT NOT NULL,
  `maxSunAlt` FLOAT NOT NULL DEFAULT -15,
  `minTime` FLOAT NOT NULL,
  `maxMoon` CHAR(1) NOT NULL,
  `minMoonSep` FLOAT NOT NULL DEFAULT 30 COMMENT 'degrees',
  `ToO` TINYINT(1) NOT NULL DEFAULT 0,
  `infinite` TINYINT(1) NOT NULL DEFAULT 0,
  `startUTC` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'only works on mysql later than 5.6.5',
  `stopUTC` DATETIME NULL COMMENT 'If Null then the Mpointing will continue until it is complete',
  `num_todo` INT NOT NULL,
  `num_completed` INT NOT NULL DEFAULT 0,
  `users_userKey` INT(11) NOT NULL,
  `surveys_surveyID` INT NULL,
  `survey_tiles_tileID` INT NULL,
  `events_eventID` INT NULL,
  `event_tiles_tileID` INT NULL,
  PRIMARY KEY (`mpointingID`),
  INDEX `fk_mpointing_events1_idx` (`events_eventID` ASC),
  INDEX `fk_mpointing_users1_idx` (`users_userKey` ASC),
  INDEX `fk_mpointings_survey_tiles1_idx` (`survey_tiles_tileID` ASC),
  INDEX `fk_mpointings_event_tiles1_idx` (`event_tiles_tileID` ASC),
  INDEX `fk_mpointings_surveys1_idx` (`surveys_surveyID` ASC),
  CONSTRAINT `fk_mpointing_events1`
    FOREIGN KEY (`events_eventID`)
    REFERENCES `goto_obs`.`events` (`eventID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mpointing_users1`
    FOREIGN KEY (`users_userKey`)
    REFERENCES `goto_obs`.`users` (`userKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mpointings_survey_tiles1`
    FOREIGN KEY (`survey_tiles_tileID`)
    REFERENCES `goto_obs`.`survey_tiles` (`tileID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mpointings_event_tiles1`
    FOREIGN KEY (`event_tiles_tileID`)
    REFERENCES `goto_obs`.`event_tiles` (`tileID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mpointings_surveys1`
    FOREIGN KEY (`surveys_surveyID`)
    REFERENCES `goto_obs`.`surveys` (`surveyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `goto_obs`.`observing_blocks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`observing_blocks` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`observing_blocks` (
  `blockID` INT NOT NULL AUTO_INCREMENT,
  `blockNum` INT NOT NULL,
  `current` INT NOT NULL DEFAULT 0,
  `valid_time` FLOAT NOT NULL COMMENT 'how long after the startUTC the pointing should be valid for in minutes',
  `wait_time` FLOAT NOT NULL COMMENT 'time to wait after this pointing before scheduling the next',
  `mpointings_mpointingID` INT NOT NULL,
  PRIMARY KEY (`blockID`),
  INDEX `fk_observing_blocks_mpointing1_idx` (`mpointings_mpointingID` ASC),
  CONSTRAINT `fk_observing_blocks_mpointing1`
    FOREIGN KEY (`mpointings_mpointingID`)
    REFERENCES `goto_obs`.`mpointings` (`mpointingID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `goto_obs`.`pointings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`pointings` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`pointings` (
  `pointingID` INT(24) NOT NULL AUTO_INCREMENT,
  `status` ENUM('pending', 'running', 'completed', 'aborted', 'interrupted', 'expired', 'deleted') NOT NULL DEFAULT 'pending',
  `object` TEXT NOT NULL COMMENT 'object name',
  `ra` FLOAT NOT NULL COMMENT 'in decimal degrees',
  `decl` FLOAT NOT NULL COMMENT 'in decimal degrees',
  `rank` INT(1) UNSIGNED NOT NULL,
  `minAlt` FLOAT NOT NULL,
  `maxSunAlt` FLOAT NOT NULL DEFAULT -15 COMMENT 'degrees	',
  `minTime` FLOAT NOT NULL,
  `maxMoon` CHAR(1) NOT NULL,
  `minMoonSep` FLOAT NOT NULL DEFAULT 30 COMMENT 'degrees',
  `ToO` TINYINT(1) UNSIGNED NOT NULL,
  `startUTC` DATETIME NOT NULL,
  `stopUTC` DATETIME NULL COMMENT 'If Null then the pointing will never expire, and will remain until observed',
  `startedUTC` DATETIME NULL,
  `stoppedUTC` DATETIME NULL,
  `ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `users_userKey` INT(11) NOT NULL,
  `mpointings_mpointingID` INT NULL,
  `observing_blocks_blockID` INT NULL,
  `surveys_surveyID` INT NULL,
  `survey_tiles_tileID` INT NULL,
  `events_eventID` INT NULL,
  `event_tiles_tileID` INT NULL,
  PRIMARY KEY (`pointingID`),
  INDEX `fk_pointings_events1_idx` (`events_eventID` ASC),
  INDEX `fk_pointings_users1_idx` (`users_userKey` ASC),
  INDEX `fk_pointings_observing_blocks1_idx` (`observing_blocks_blockID` ASC),
  INDEX `fk_pointings_mpointings1_idx` (`mpointings_mpointingID` ASC),
  INDEX `status_idx` (`status` ASC),
  INDEX `start_idx` (`startUTC` ASC),
  INDEX `stop_idx` (`stopUTC` ASC),
  INDEX `fk_pointings_event_tiles1_idx` (`event_tiles_tileID` ASC),
  INDEX `fk_pointings_survey_tiles1_idx` (`survey_tiles_tileID` ASC),
  INDEX `fk_pointings_surveys1_idx` (`surveys_surveyID` ASC),
  CONSTRAINT `fk_pointings_events1`
    FOREIGN KEY (`events_eventID`)
    REFERENCES `goto_obs`.`events` (`eventID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pointings_users1`
    FOREIGN KEY (`users_userKey`)
    REFERENCES `goto_obs`.`users` (`userKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pointings_observing_blocks1`
    FOREIGN KEY (`observing_blocks_blockID`)
    REFERENCES `goto_obs`.`observing_blocks` (`blockID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pointings_mpointings1`
    FOREIGN KEY (`mpointings_mpointingID`)
    REFERENCES `goto_obs`.`mpointings` (`mpointingID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pointings_event_tiles1`
    FOREIGN KEY (`event_tiles_tileID`)
    REFERENCES `goto_obs`.`event_tiles` (`tileID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pointings_survey_tiles1`
    FOREIGN KEY (`survey_tiles_tileID`)
    REFERENCES `goto_obs`.`survey_tiles` (`tileID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pointings_surveys1`
    FOREIGN KEY (`surveys_surveyID`)
    REFERENCES `goto_obs`.`surveys` (`surveyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 17073
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `goto_obs`.`exposure_sets`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`exposure_sets` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`exposure_sets` (
  `expID` INT(24) NOT NULL AUTO_INCREMENT,
  `utMask` INT NULL COMMENT 'bit mask to allocate to individual UTs. NULL means send to all',
  `typeFlag` ENUM('SCIENCE', 'FOCUS', 'DARK', 'BIAS', 'FLAT', 'STD') NOT NULL,
  `filter` CHAR(2) NOT NULL,
  `exptime` FLOAT NOT NULL,
  `binning` INT(11) UNSIGNED NOT NULL,
  `numexp` INT(11) UNSIGNED NOT NULL,
  `raoff` FLOAT NOT NULL DEFAULT 0.0 COMMENT 'RA offset (arcsecs)',
  `decoff` FLOAT NOT NULL DEFAULT 0.0 COMMENT 'dec offset (arcsec)',
  `pointings_pointingID` INT NULL,
  `mpointings_mpointingID` INT NULL,
  PRIMARY KEY (`expID`),
  INDEX `fk_exposures_pointings1_idx` (`pointings_pointingID` ASC),
  INDEX `fk_exposures_mpointing1_idx` (`mpointings_mpointingID` ASC),
  CONSTRAINT `fk_exposures_pointings1`
    FOREIGN KEY (`pointings_pointingID`)
    REFERENCES `goto_obs`.`pointings` (`pointingID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_exposures_mpointing1`
    FOREIGN KEY (`mpointings_mpointingID`)
    REFERENCES `goto_obs`.`mpointings` (`mpointingID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 126598
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `goto_obs`.`obslog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `goto_obs`.`obslog` ;

CREATE TABLE IF NOT EXISTS `goto_obs`.`obslog` (
  `obsID` INT(24) NOT NULL,
  `frame` VARCHAR(30) NOT NULL COMMENT 'frame or file number',
  `UTstart` DATETIME NOT NULL,
  `object` TEXT NOT NULL,
  `type` TEXT NOT NULL,
  `ra` FLOAT NOT NULL,
  `decl` FLOAT NOT NULL,
  `exptime` FLOAT NOT NULL,
  `airmass` FLOAT NOT NULL,
  `filter` CHAR(2) NOT NULL,
  `binning` INT(11) UNSIGNED NOT NULL,
  `foc` INT(11) UNSIGNED NOT NULL,
  `temp` FLOAT NOT NULL,
  `otaID` INT NOT NULL COMMENT 'identifies OTA',
  `camID` INT NOT NULL COMMENT 'identifies camera',
  `pointings_pointingID` INT(12) NOT NULL,
  PRIMARY KEY (`obsID`),
  UNIQUE INDEX `frame` (`frame` ASC),
  INDEX `fk_obslog_pointings1_idx` (`pointings_pointingID` ASC),
  INDEX `ota_key` (`otaID` ASC),
  INDEX `cam_key` (`camID` ASC),
  CONSTRAINT `fk_obslog_pointings1`
    FOREIGN KEY (`pointings_pointingID`)
    REFERENCES `goto_obs`.`pointings` (`pointingID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 204285
DEFAULT CHARACTER SET = latin1;

SET SQL_MODE = '';
GRANT USAGE ON *.* TO goto;
 DROP USER goto;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'goto' IDENTIFIED BY 'gotoobs';

GRANT ALL ON `goto_obs`.* TO 'goto';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `goto_obs`;

DELIMITER $$

USE `goto_obs`$$
DROP TRIGGER IF EXISTS `goto_obs`.`event_tiles_BEFORE_INSERT` $$
USE `goto_obs`$$
CREATE DEFINER = CURRENT_USER TRIGGER `goto_obs`.`event_tiles_BEFORE_INSERT` BEFORE INSERT ON `event_tiles` FOR EACH ROW
BEGIN
	IF ((NEW.survey_tiles_tileID is not NULL) and (NEW.ra is NULL) and (NEW.decl is NULL)) THEN
		SET NEW.ra = (SELECT ra FROM `survey_tiles` WHERE NEW.survey_tiles_tileID = `survey_tiles`.`tileID`);
		SET NEW.decl = (SELECT decl FROM `survey_tiles` WHERE NEW.survey_tiles_tileID = `survey_tiles`.`tileID`);
    END IF;
    IF ((NEW.unobserved_probability is NULL) and (NEW.probability is not NULL)) THEN
		SET NEW.unobserved_probability = NEW.probability;
	END IF;
END$$


USE `goto_obs`$$
DROP TRIGGER IF EXISTS `goto_obs`.`mpointings_BEFORE_INSERT` $$
USE `goto_obs`$$
CREATE DEFINER = CURRENT_USER TRIGGER `goto_obs`.`mpointings_BEFORE_INSERT` BEFORE INSERT ON `mpointings` FOR EACH ROW
BEGIN
	IF ((NEW.survey_tiles_tileID is not NULL) and (NEW.ra is NULL) and (NEW.decl is NULL)) THEN
		SET NEW.ra = (SELECT ra FROM `survey_tiles` WHERE NEW.survey_tiles_tileID = `survey_tiles`.`tileID`);
		SET NEW.decl = (SELECT decl FROM `survey_tiles` WHERE NEW.survey_tiles_tileID = `survey_tiles`.`tileID`);
    END IF;
END$$


USE `goto_obs`$$
DROP TRIGGER IF EXISTS `goto_obs`.`mpointings_BEFORE_UPDATE` $$
USE `goto_obs`$$
CREATE DEFINER = CURRENT_USER TRIGGER `goto_obs`.`mpointings_BEFORE_UPDATE` BEFORE UPDATE ON `mpointings` FOR EACH ROW
BEGIN
	IF (NEW.`num_completed` = NEW.`num_todo` and NEW.`infinite` = 0) THEN
        /* the Mpointing is finished (infinite Mpointings can never be completed!)*/
        SET NEW.`status` = 'completed';
	END IF;
END$$


USE `goto_obs`$$
DROP TRIGGER IF EXISTS `goto_obs`.`pointings_BEFORE_INSERT` $$
USE `goto_obs`$$
CREATE DEFINER = CURRENT_USER TRIGGER `goto_obs`.`pointings_BEFORE_INSERT` BEFORE INSERT ON `pointings` FOR EACH ROW
BEGIN
	IF ((NEW.survey_tiles_tileID is not NULL) and (NEW.ra is NULL) and (NEW.decl is NULL)) THEN
		SET NEW.ra = (SELECT ra FROM `survey_tiles` WHERE NEW.survey_tiles_tileID = `survey_tiles`.`tileID`);
		SET NEW.decl = (SELECT decl FROM `survey_tiles` WHERE NEW.survey_tiles_tileID = `survey_tiles`.`tileID`);
    END IF;
END$$


USE `goto_obs`$$
DROP TRIGGER IF EXISTS `goto_obs`.`pointings_AFTER_INSERT` $$
USE `goto_obs`$$
CREATE DEFINER = CURRENT_USER TRIGGER `goto_obs`.`pointings_AFTER_INSERT` AFTER INSERT ON `pointings` FOR EACH ROW
BEGIN
	IF (NEW.`observing_blocks_blockID` is not NULL) AND (NEW.status = 'pending') THEN
        /* mark all other blocks for this Mpointing as current=False, and the one for this Pointing as current=True */
		UPDATE `observing_blocks` SET `current` = 0 WHERE (NEW.`mpointings_mpointingID` = `observing_blocks`.`mpointings_mpointingID`);
		UPDATE `observing_blocks` SET `current` = 1 WHERE (NEW.`observing_blocks_blockID` = `observing_blocks`.`blockID`);
    END IF;
	IF (NEW.`mpointings_mpointingID` is not NULL) AND (NEW.status = 'pending') THEN
		UPDATE `mpointings` SET `status` = 'scheduled' WHERE (NEW.`mpointings_mpointingID` = `mpointings`.`mpointingID`);
    END IF;
END$$


USE `goto_obs`$$
DROP TRIGGER IF EXISTS `goto_obs`.`pointings_BEFORE_UPDATE` $$
USE `goto_obs`$$
CREATE DEFINER = CURRENT_USER TRIGGER `goto_obs`.`pointings_BEFORE_UPDATE` BEFORE UPDATE ON `pointings` FOR EACH ROW
BEGIN
	IF (NEW.`ts` <> OLD.`ts`) THEN
    	IF (OLD.`status` != 'running' AND NEW.`status` = 'running') THEN
			/* the pointing has started */
			SET NEW.`startedUTC` = NOW();
        END IF;
		IF (OLD.`status` IN ('pending', 'running') AND NEW.`status` NOT IN ('pending', 'running')) THEN
			/* the pointing has finished somehow (completed, aborted, interrupted, expired...) */
			SET NEW.`stoppedUTC` = NOW();
        END IF;
	END IF;
END$$


USE `goto_obs`$$
DROP TRIGGER IF EXISTS `goto_obs`.`pointings_AFTER_UPDATE` $$
USE `goto_obs`$$
CREATE DEFINER = CURRENT_USER TRIGGER `goto_obs`.`pointings_AFTER_UPDATE` AFTER UPDATE ON `pointings` FOR EACH ROW
BEGIN
	DECLARE isinfinite INT;
	IF (NEW.`ts` <> OLD.`ts`) THEN
		IF NEW.`status` NOT IN ('pending', 'running') THEN
			/* the pointing is finished somehow (completed, aborted, interrupted, expired...) */
			UPDATE `mpointings` SET `status` = 'unscheduled' WHERE (NEW.`mpointings_mpointingID` = `mpointings`.`mpointingID`);
		END IF;
		IF NEW.`status` = 'completed' THEN
			/* increase the Mpointing's completed count */
			UPDATE `mpointings` SET `num_completed` = `num_completed` + 1 WHERE (NEW.`mpointings_mpointingID` = `mpointings`.`mpointingID`);
			/* check if the Mpointing is infinite */
			SELECT `infinite` INTO isinfinite FROM `mpointings` WHERE (NEW.`mpointings_mpointingID` = `mpointings`.`mpointingID`);
			IF isinfinite = 0 THEN
				/* only add 10 to the rank when the pointing was completed if it's not an infinite Mpointing */
				UPDATE `mpointings` SET `rank` = `rank` + 10 WHERE (NEW.`mpointings_mpointingID` = `mpointings`.`mpointingID`);
			END IF;
		END IF;
	END IF;
END$$


DELIMITER ;

