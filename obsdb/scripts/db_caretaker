#!/usr/bin/env python
"""
A script to take care of the queue database
"""

import os
import sys
import time

from sqlalchemy.orm import joinedload

import obsdb as db


def ThereCanOnlyBeOne():
    """Quit if this process is already running (dodgy kludge!)"""
    ps = os.popen('ps -fu ' + os.environ['LOGNAME'] + ' | grep -v cron | grep -v emacs').read()
    if ps.count(sys.argv[0]) > 1:
        print(sys.argv[0], ' already running')
        sys.exit()


ThereCanOnlyBeOne()

WAIT_TIME = 600 # should be param

while True:
    # mark expired Pointings
    with db.open_session() as session:
        print('Getting any expired Pointings...')
        expired_pointings = db.get_expired_pointing_ids(session)

        if len(expired_pointings) > 0:
            print('> Marking {} Pointings as expired'.format(len(expired_pointings)))
            start = time.time()
            db.bulk_update_pointing_status(session, expired_pointings, 'expired')
            print('>    took {:.2f} secs'.format(time.time()-start))
        else:
            print('> None found')

    # mark expired Mpointings
    with db.open_session() as session:
        print('Getting any expired Mpointings...')
        expired_mpointings = db.get_expired_mpointing_ids(session)

        if len(expired_mpointings) > 0:
            print('> Marking {} Mpointings as expired'.format(len(expired_mpointings)))
            start = time.time()
            db.bulk_update_mpointing_status(session, expired_mpointings, 'expired')
            print('>    took {:.2f} secs'.format(time.time()-start))
        else:
            print('> None found')

    # check Mpointings marked as unscheduled are really unscheduled
    # (we've had issues in the past with multiple scheduled pointings)
    with db.open_session() as session:
        unscheduled_mps = db.get_mpointings(session, status='unscheduled')
        incorrect_mps = []

        if len(unscheduled_mps) > 0:
            for mp in unscheduled_mps:
                statuses = [p.status for p in mp.pointings]
                if 'pending' in statuses or 'running' in statuses:
                    incorrect_mps += [mp.mpointingID]
            if len(incorrect_mps) > 0:
                print('Found some incorrectly marked unscheduled Mpointings...')
                print('> Marking {} Mpointings as scheduled'.format(len(incorrect_mps)))
                start = time.time()
                db.bulk_update_mpointing_status(session, incorrect_mps, 'scheduled')
                print('>    took {:.2f} secs'.format(time.time()-start))

    # schedule Pointings for unscheduled Mpointings
    with db.open_session() as session:
        print('Getting any unscheduled Mpointings...')
        unscheduled_mps = db.get_mpointings(session, status='unscheduled')

        if len(unscheduled_mps) > 0:
            print('> Creating {} new Pointings'.format(len(unscheduled_mps)))
            start = time.time()
            pointings = [mp.get_next_pointing() for mp in unscheduled_mps]
            pointings = [p for p in pointings if p is not None]
            print('>    took {:.2f} secs'.format(time.time()-start))

            print('> Inserting {} Pointings into DB'.format(len(pointings)))
            start = time.time()
            db.insert_items(session, pointings)
            print('>    took {:.2f} secs'.format(time.time()-start))
        else:
            print('> None found')

    print('Done, waiting for {}s'.format(WAIT_TIME))

    print('~~~~~~~~~~~~~~~~~~~')
    try:
        time.sleep(WAIT_TIME)
    except KeyboardInterrupt:
        print('...ctrl+c detected, closing...')
        sys.exit()
