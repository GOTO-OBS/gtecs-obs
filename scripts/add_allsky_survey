#!/usr/bin/env python
"""A script to fill G-TeCS database using GOTO-tile."""

import argparse
import getpass
import time

import astropy.units as u

from gototile.grid import SkyGrid

import obsdb as db


SURVEY_SETTINGS = dict(start_rank=999,
                       minAlt=35,
                       minTime=120,
                       maxSunAlt=-12,
                       maxMoon='B',
                       minMoonSep=30,
                       ToO=0,
                       num_todo=-1,
                       valid_time=-1,
                       wait_time=4320)

EXP_SETTINGS = dict(expTime=120,
                    raoff=0.,
                    decoff=0.,
                    numexp=3,
                    typeFlag='SCIENCE',
                    filt='L',
                    binning=1,
                    utMask=None)


def get_userkey(username, description=''):
    """Get user key of a user, and create it if it doesn't exit."""
    with db.open_session() as session:
        try:
            user_key = db.get_userkey(session, username)
        except Exception:
            # Create user if it doesn't exist
            prompt = "Creating {} user - give password: ".format(username)
            passwd = getpass.getpass(prompt=prompt)
            db.add_user(session, username, passwd, description)
            session.commit()
            user_key = db.get_userkey(session, username)
    return user_key


def run(fov, overlap):
    """Create the mpointings and add them to the database."""
    # Create an all-sky grid with GOTO-tile
    grid = SkyGrid(fov, overlap)
    tile_coords = grid.coords
    tile_names = grid.tilenames

    # Add to the database
    user_key = get_userkey('goto', 'GOTO Survey')
    with db.open_session() as session:
        # create a Survey
        survey = db.Survey(name=grid.name)
        session.add(survey)

        # create SurveyTiles
        tiles = []
        print('Creating tiles...')
        start = time.time()
        for coord, name in zip(tile_coords, tile_names):
            ra = coord.ra.value
            dec = coord.dec.value
            if abs(dec) < 0.00001:  # GOTO-tile rounding errors
                dec = 0
            tile = db.SurveyTile(ra=float(ra), dec=float(dec), name=str(name))
            tile.survey = survey
            tiles.append(tile)
        print('  took {:.2f} secs'.format(time.time() - start))

        print('Adding {} tiles to database...'.format(len(tiles)))
        start = time.time()
        db.insert_items(session, tiles)
        print('  took {:.2f} secs'.format(time.time() - start))

        # create Mpointings
        mpointings = []
        print('Creating mpointings...')
        start = time.time()
        for tile in tiles:
            mp = db.Mpointing(userKey=user_key,
                              objectName=tile.name,
                              **SURVEY_SETTINGS)
            mp.objectName = survey.name + '_' + tile.name
            mp.surveyID = survey.surveyID
            mp.surveyTileID = tile.tileID
            mp.exposure_sets.append(db.ExposureSet(**EXP_SETTINGS))
            mpointings.append(mp)
        print('  took {:.2f} secs'.format(time.time() - start))

        print('Adding {} mpointings to database...'.format(len(mpointings)))
        start = time.time()
        db.insert_items(session, mpointings)
        print('  took {:.2f} secs'.format(time.time() - start))
    print('Done')


if __name__ == '__main__':
    description = """Fill the GOTO observation database with survey tiles."""

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('ra_fov', help="FoV in RA", type=float, default=5.6)
    parser.add_argument('dec_fov', help="FoV in Dec", type=float, default=2.5)
    parser.add_argument('ra_overlap', help="Overlap in RA", type=float, default=0.1)
    parser.add_argument('dec_overlap', help="Overlap in Dec", type=float, default=0.5)

    args = parser.parse_args()

    fov = {'ra': args.ra_fov * u.deg, 'dec': args.dec_fov * u.deg}
    overlap = {'ra': args.ra_overlap, 'dec': args.dec_overlap}

    run(fov, overlap)
