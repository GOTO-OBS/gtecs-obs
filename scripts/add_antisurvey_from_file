#!/usr/bin/env python3
"""A script add an inverse survey of defined points into the G-TeCS database."""

import argparse
import time

from astropy.coordinates import SkyCoord

from gtecs.obs import database as db


TARGET_PARAMS = {'start_rank': 800,
                 'num_todo': 3,
                 'wait_time': 10080,  # 1 week
                 }

EXPS_PARAMS = [{'num_exp': 3, 'exptime': 60, 'filt': 'L', }]


def get_coords_from_file(filename):
    """Define mini-survey tiles centres and ranks."""
    all_ras = []
    all_decs = []
    ranks = []
    names = []
    with open(filename) as file:
        for i, line in enumerate(file):
            if line[0] == '#':
                continue
            tile, ra, dec, *_ = line.split()
            if i > 800:
                break
            rank = (i - 1) // 100 + 990
            name = tile  # 'Galaxy_survey_{}'.format(tile)

            # print(name, ra, dec, rank)

            all_ras.append(ra)
            all_decs.append(dec)
            ranks.append(rank)
            names.append(name)

    return all_ras, all_decs, ranks, names


def run(filename):
    """Create the targets and add them to the database."""
    # Find the current Grid in the database
    with db.open_session() as session:
        # Get the current grid
        db_grid = db.get_current_grid(session)

        # Get the tile names and coords
        tile_ras = [grid_tile.ra for grid_tile in db_grid.grid_tiles]
        tile_decs = [grid_tile.dec for grid_tile in db_grid.grid_tiles]
        tile_coords = SkyCoord(tile_ras, tile_decs, unit='deg')

        tile_names = [grid_tile.name for grid_tile in db_grid.grid_tiles]

        # Get the tiles that are in the survey file
        _, _, _, survey_names = get_coords_from_file(filename)

        # Filter to the tiles NOT in the survey file
        # (I bet there's a better way to do this with masks...)
        ras = []
        decs = []
        names = []
        for coord, name in zip(tile_coords, tile_names):
            if name not in survey_names:
                ras.append(coord.ra.value)
                decs.append(coord.dec.value)
                names.append('Galaxy_anti-survey_{}'.format(name))

        # Get default User
        user = db.get_user(session, username='default')

        # Create Targets
        targets = []
        print('Creating targets...')
        start = time.time()
        for ra, dec, name in zip(ras, decs, names):
            target_params = TARGET_PARAMS.copy()
            target_params['name'] = name
            target_params['ra'] = float(ra)
            target_params['dec'] = float(dec)

            target = db.Target(**target_params,
                               user=user,
                               )
            for exps_params in EXPS_PARAMS:
                target.exposure_sets.append(db.ExposureSet(**exps_params))

            targets.append(target)
        print('  took {:.2f} secs'.format(time.time() - start))

        # Add to database
        print('Adding {} targets to database...'.format(len(targets)))
        start = time.time()
        db.insert_items(session, targets)
        print('  took {:.2f} secs'.format(time.time() - start))

    print('Done')


if __name__ == '__main__':
    description = __doc__

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('file', help='File with tiles', type=str)

    args = parser.parse_args()

    filename = args.file

    run(filename)
