#!/usr/bin/env python3
"""A script add an inverse survey of defined points into the G-TeCS database."""

import argparse
import time

from astropy.coordinates import SkyCoord

from gtecs.obs import database as db


MP_SETTINGS = {'start_rank': 800,
               'num_todo': 3,
               'wait_time': 10080,  # 1 week
               'min_time': (60 + 5) * 3,
               'max_sunalt': -12,
               }

EXP_SETTINGS = {'num_exp': 3,
                'exptime': 60,
                'filt': 'L',
                }


def get_coords_from_file(filename):
    """Define mini-survey tiles centres and ranks."""
    allras = []
    alldecs = []
    ranks = []
    names = []
    with open(filename) as file:
        for i, line in enumerate(file):
            if line[0] == '#':
                continue
            tile, ra, dec, *_ = line.split()
            if i > 800:
                break
            rank = (i - 1) // 100 + 990
            name = tile  # 'Galaxy_survey_{}'.format(tile)

            # print(name, ra, dec, rank)

            allras.append(ra)
            alldecs.append(dec)
            ranks.append(rank)
            names.append(name)

    return allras, alldecs, ranks, names


def run(filename):
    """Create the mpointings and add them to the database."""
    # Find the current Grid in the database
    with db.open_session() as session:
        # Get the current grid
        db_grid = db.get_current_grid(session)

        # Get the tile names and coords
        tile_ras = [grid_tile.ra for grid_tile in db_grid.grid_tiles]
        tile_decs = [grid_tile.dec for grid_tile in db_grid.grid_tiles]
        tile_coords = SkyCoord(tile_ras, tile_decs, unit='deg')

        tile_names = [grid_tile.name for grid_tile in db_grid.grid_tiles]

    # Get the tiles that are in the survey file
    _, _, _, survey_names = get_coords_from_file(filename)

    # Filter to the tiles NOT in the survey file
    # (I bet there's a better way to do this with masks...)
    ras = []
    decs = []
    names = []
    for coord, name in zip(tile_coords, tile_names):
        if name not in survey_names:
            ras.append(coord.ra.value)
            decs.append(coord.dec.value)
            names.append('Galaxy_anti-survey_{}'.format(name))

    # Add to the database
    mpointings = []
    with db.open_session() as session:
        # get default User
        user = db.get_user(session, username='goto')

        # create Mpointings
        print('Creating mpointings...')
        start = time.time()
        for ra, dec, name in zip(ras, decs, names):
            mp = db.Mpointing(object_name=name,
                              ra=float(ra),
                              dec=float(dec),
                              **MP_SETTINGS,
                              user=user,
                              )

            mp.exposure_sets.append(db.ExposureSet(**EXP_SETTINGS))

            # Create the first Pointing (i.e. preempt the caretaker)
            p = mp.get_next_pointing()
            mp.pointings.append(p)

            mpointings.append(mp)
        print('  took {:.2f} secs'.format(time.time() - start))

        print('Adding {} mpointings to database...'.format(len(mpointings)))
        start = time.time()
        db.insert_items(session, mpointings)
        print('  took {:.2f} secs'.format(time.time() - start))


if __name__ == '__main__':
    description = __doc__

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('file', help="File with tiles", type=str)

    args = parser.parse_args()

    filename = args.file

    run(filename)
