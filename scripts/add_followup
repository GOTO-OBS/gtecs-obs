#!/usr/bin/env python3
"""A simple script to add a target for followup to the observation database."""

import os
import sys

import astropy.units as u
from astropy.coordinates import SkyCoord
from astropy.time import Time

from gtecs.obs import database as db


def run(name, target_ra, target_dec):
    """Add an Mpointing with 5 60s L filter exposures."""
    with db.open_session() as session:
        # Get the current grid
        db_grid = db.get_current_grid(session)

        # Create a SkyGrid from the database Grid
        grid = db_grid.get_skygrid()

        # Find which tile the given coordinates are in
        coord = SkyCoord(target_ra * u.deg, target_dec * u.deg)
        tile_name = grid.get_tile(coord)

        # Find the matching GridTile
        query = session.query(db.GridTile)
        query = query.filter(db.GridTile.grid == db_grid,
                             db.GridTile.name == tile_name)
        db_grid_tile = query.one_or_none()
        if not db_grid_tile:
            raise ValueError('Cannot find tile in the database')

        print('Using grid {} tile {}: ra={:.4f}, dec={:.4f}'.format(db_grid.name,
                                                                    db_grid_tile.name,
                                                                    db_grid_tile.ra,
                                                                    db_grid_tile.dec,
                                                                    ))

        # Get default User
        user = db.get_user(session, username='goto')

        # Get Mpointing and ExposureSet data
        expsets = [{'num_exp': 5,
                    'exptime': 60,
                    'filt': 'L',
                    },
                   ]

        mp_data = {'object_name': name,
                   'start_rank': 0,
                   'num_todo': 1,
                   'wait_time': 12 * 60,
                   'start_time': str(Time.now()),
                   'stop_time': str(Time.now() + 1 * u.day),
                   'min_time': 450,  # (60+30)*5
                   }

        # Create database enteries
        db_mpointing = db.Mpointing(**mp_data, user=user)
        db_mpointing.grid_tile = db_grid_tile
        for exp_data in expsets:
            db_exposure_set = db.ExposureSet(**exp_data)
            db_mpointing.exposure_sets.append(db_exposure_set)

        # Create the first Pointing (i.e. preempt the caretaker)
        db_pointing = db_mpointing.get_next_pointing()
        db_mpointing.pointings.append(db_pointing)

        # Add to database
        db.insert_items(session, [db_mpointing])

        # Print for debugging
        print('Added to database:')
        session.refresh(db_mpointing)
        print(db_mpointing)
        for db_exposure_set in db_mpointing.exposure_sets:
            print(db_exposure_set)


if __name__ == '__main__':
    args = sys.argv[1:]
    if len(args) != 3:
        print('Add a single pointing with 5 60s L exposures')
        print('Usage: {} <name> <ra> <dec>'.format(os.path.basename(__file__)))
        print(' (<ra> and <dec> should be in decimal degrees)')
        sys.exit()

    # Target name
    name = args[0]

    # RA
    try:
        ra = float(args[1])
        assert 0 <= ra < 360
    except Exception:
        print('Invalid RA, must be in decimal degrees')
        sys.exit()

    # Dec
    try:
        dec = float(args[2])
        assert -90 < dec < 90
    except Exception:
        print('Invalid Dec, must be in decimal degrees')
        sys.exit()

    # Run main program
    run(name, ra, dec)
