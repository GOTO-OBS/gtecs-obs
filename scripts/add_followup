#!/usr/bin/env python3
"""A simple script to add a target for followup to the observation database."""

import argparse

import astropy.units as u
from astropy.coordinates import SkyCoord
from astropy.time import Time

from gtecs.obs import database as db


TARGET_PARAMS = {'rank': 0,
                 }
STRATEGY_PARAMS = {'num_todo': 1,
                   'wait_time': 12 * 60,
                   }

EXPS_PARAMS = [{'num_exp': 3, 'exptime': 60, 'filt': 'L'},
               {'num_exp': 1, 'exptime': 60, 'filt': 'R'},
               {'num_exp': 1, 'exptime': 60, 'filt': 'G'},
               {'num_exp': 1, 'exptime': 60, 'filt': 'B'},
               ]


def run(name, coord):
    """Create the target and add it to the database."""
    with db.open_session() as session:
        # Get the current grid
        db_grid = db.get_current_grid(session)

        # Create a SkyGrid from the database Grid
        grid = db_grid.skygrid

        # Find which tile the given coordinates are in
        tile_name = grid.get_tile(coord)

        # Find the matching GridTile
        query = session.query(db.GridTile)
        query = query.filter(db.GridTile.grid == db_grid,
                             db.GridTile.name == tile_name)
        db_grid_tile = query.one_or_none()
        if not db_grid_tile:
            raise ValueError('Cannot find tile in the database')

        print('Using grid {} tile {}: ra={:.4f}, dec={:.4f}'.format(db_grid.name,
                                                                    db_grid_tile.name,
                                                                    db_grid_tile.ra,
                                                                    db_grid_tile.dec,
                                                                    ))

        # Get default User
        user = db.get_user(session, username='default')

        # Create Target
        target_params = TARGET_PARAMS.copy()
        target_params['name'] = name
        target_params['start_time'] = str(Time.now())
        target_params['stop_time'] = str(Time.now() + 1 * u.day)

        target = db.Target(**target_params,
                           user=user,
                           strategy=db.Strategy(**STRATEGY_PARAMS.copy()),
                           grid_tile=db_grid_tile,
                           )
        for exps_params in EXPS_PARAMS:
            target.exposure_sets.append(db.ExposureSet(**exps_params))

        # Add to database
        db.insert_items(session, [target])
        print('Added to database:')
        session.refresh(target)
        print(target)
        for exposure_set in target.exposure_sets:
            print(exposure_set)

    print('Done')


if __name__ == '__main__':
    description = """Add a single pointing for a given target."""

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('name', type=str, help='Target name')
    parser.add_argument('ra', type=float, help='Target RA')
    parser.add_argument('dec', type=float, help='Target Dec')

    args = parser.parse_args()

    name = args.name
    coord = SkyCoord(args.ra * u.deg, args.dec * u.deg)

    run(name, coord)
