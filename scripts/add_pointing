#!/usr/bin/env python3
"""A script to allow simple adding of pointings to the scheduler database."""

import astropy.units as u
from astropy.coordinates import SkyCoord

from gtecs.obs import database as db
from gtecs.obs import params


def parse_ra(ra_str):
    """Parse an RA string and return a float in decimal degrees, or ValueError.

    Valid formats:
        Decimal degrees
            e.g. "6" OR "212" OR "317.321"
        Hour Minute Second (space or colon seperated)
            e.g. "3 2 1" OR "10:0:0" OR "8 56 25.7"

    Will also check for limits (0 <= hours < 24 etc.)

    """
    ra_list = ra_str.replace(':', ' ').split()

    # option 1: decimal degrees
    if len(ra_list) == 1:
        try:
            ra_deg = float(ra_list[0])
        except Exception:
            raise ValueError('Invalid value for RA in degrees')
        if not 0 <= ra_deg < 360:
            raise ValueError('RA in degrees must be between 0 and 360')

    # option 2: hms notation
    elif len(ra_list) == 3:
        try:
            h = int(ra_list[0])
            m = int(ra_list[1])
            s = float(ra_list[2])
        except Exception:
            raise ValueError('Invalid input for RA in h m s')
        if not 0 <= h < 24:
            raise ValueError('RA hours must be between 0 and 24')
        if not 0 <= m < 60:
            raise ValueError('RA minutes must be between 0 and 60')
        if not 0 <= s < 60:
            raise ValueError('RA seconds must be between 0 and 60')
        ra_hrs = h + m / 60. + s / 3600.
        ra_deg = ra_hrs * 360. / 24.

    # they're the only options
    else:
        raise ValueError('Invalid input, use either deg or h m s')

    return ra_deg


def parse_dec(dec_str):
    """Parse an Dec string and return a float in decimal degrees, or ValueError.

    Valid formats:
        Decimal degrees
            e.g. "002" OR "194" OR "43.51"
        Degree Arcminute Arcsecond (space or colon seperated)
            e.g. "201 9 55" OR "+12:4:2.54" OR "-0 44 19"
        Sign Degree Arcminute Arcsecond (space or colon seperated)
            e.g. "+ 201 9 55" OR "+ 12:4:2.54" OR "- 0 44 19"

    Will also check for limits (0 <= minutes < 60 etc.)

    """
    dec_list = dec_str.replace(':', ' ').split()

    # option 1: decimal degrees
    if len(dec_list) == 1:
        try:
            dec_deg = float(dec_list[0])
        except Exception:
            raise ValueError('Invalid value for Dec in degrees')
        if not -90 <= dec_deg <= 90:
            raise ValueError('Dec in degrees must be between 90 and -90')

    # option 2: +dms notation (the old way)
    elif len(dec_list) == 4:
        if dec_list[0] not in ['+', '-']:
            raise ValueError('Sign should be "+" or "-"')
        sign = dec_list[0]
        try:
            d = int(dec_list[1])
            m = int(dec_list[2])
            s = float(dec_list[3])
        except Exception:
            raise ValueError('Invalid input for Dec in d m s')
        if not -90 <= d <= 90:
            raise ValueError('Dec degrees must be between 90 and -90')
        if not 0 <= m < 60:
            raise ValueError('Dec arcminutes must be between 0 and 60')
        if not 0 <= s < 60:
            raise ValueError('Dec arcseconds must be between 0 and 60')
        if sign == '+':
            dec_deg = d + m / 60. + s / 3600.
        else:
            dec_deg = -d - m / 60. - s / 3600.
        if not -90 <= dec_deg <= 90:
            raise ValueError('Dec must be between 90 and -90')

    # option 3: dms notation (need to extract sign, for -0)
    elif len(dec_list) == 3:
        if dec_list[0][0] == '-':
            sign = '-'
        else:
            sign = '+'
        try:
            d = int(dec_list[0])
            m = int(dec_list[1])
            s = float(dec_list[2])
        except Exception:
            raise ValueError('Invalid input for Dec in d m s')
        if not -90 <= d <= 90:
            raise ValueError('Dec degrees must be between 90 and -90')
        if not 0 <= m < 60:
            raise ValueError('Dec arcminutes must be between 0 and 60')
        if not 0 <= s < 60:
            raise ValueError('Dec arcseconds must be between 0 and 60')
        if sign == '+':
            dec_deg = d + m / 60. + s / 3600.
        else:  # NB d is negative
            dec_deg = d - m / 60. - s / 3600.
        if not -90 <= dec_deg <= 90:
            raise ValueError('Dec must be between 90 and -90')

    # they're the only options
    else:
        raise ValueError('Invalid input, use either deg or d m s')

    return dec_deg


def fill_target(session):
    """Fill out a target frame with user input."""
    target_params = {'name': None,
                     'ra': None,
                     'dec': None,
                     'start_rank': None,
                     }
    strategy_params = {'num_todo': None,
                       'wait_time': None,
                       'valid_time': None,
                       'too': None,
                       'min_alt': params.DEFAULT_MIN_ALT,
                       'max_sunalt': params.DEFAULT_MAX_SUNALT,
                       'max_moon': params.DEFAULT_MAX_MOON,
                       'min_moonsep': params.DEFAULT_MIN_MOONSEP,
                       }

    # On or off grid?
    on_grid = None
    while on_grid not in ['y', 'n', 'Y', 'N']:
        on_grid = input('Observe constrained to the grid? [y/n]: ')
    if on_grid in ['y', 'Y']:
        # Get the current grid
        db_grid = db.get_current_grid(session)

        # Create a SkyGrid from the database Grid
        grid = db_grid.skygrid

        print('    Using grid {}'.format(db_grid.name))

        obstile = None
        while obstile not in ['1', '2']:
            obstile = input('Observe a specific tile [1] or find a tile from coordinates [2]?: ')
        if obstile == '1':
            tile_index = None
            while tile_index is None:
                tile_name = 'T' + input('Tile to observe: T')
                try:
                    tile_index = grid.tilenames.index(tile_name)
                except ValueError:
                    print('Could not find tile {} in grid {}'.format(tile_name, grid.name))
        else:
            target_ra = None
            target_dec = None
            while target_ra is None:
                ra_str = input('Target RA [h m s OR deg]: ')
                try:
                    target_ra = parse_ra(ra_str)
                except Exception:
                    print('Invalid input')
            while target_dec is None:
                dec_str = input('Target Dec [d m s OR deg]: ')
                try:
                    target_dec = parse_dec(dec_str)
                except Exception:
                    print('Invalid input')

            # Find which tile the given coordinates are in
            coord = SkyCoord(target_ra * u.deg, target_dec * u.deg)
            tile_name = grid.get_tile(coord)

        # Find the matching GridTile
        query = session.query(db.GridTile)
        query = query.filter(db.GridTile.grid == db_grid,
                             db.GridTile.name == tile_name)
        db_grid_tile = query.one_or_none()
        if not db_grid_tile:
            raise ValueError('Cannot find tile in the database')

        print('    Using coords for {}: ra={:.4f}, dec={:.4f}'.format(db_grid_tile.name,
                                                                      db_grid_tile.ra,
                                                                      db_grid_tile.dec,
                                                                      ))
        target_params['ra'] = db_grid_tile.ra
        target_params['dec'] = db_grid_tile.dec
        target_params['grid_tile'] = db_grid_tile

        # Object name
        default_name = db_grid.name + '_' + db_grid_tile.name + '_' + 'EXTRA'
        name = input('Enter Target name (blank for "{}"): '.format(default_name))
        if not name:
            name = default_name
        target_params['name'] = name

    else:
        # We're off grid
        target_params['grid_tile'] = None

        # Object name
        while target_params['name'] is None:
            target_params['name'] = input('Enter Target name: ')

        # Try coord lookup
        try:
            coord = SkyCoord.from_name(target_params['name'])
        except Exception:
            coord = None
        if coord is not None:
            print('    Found catalogue object: ra={:.4f}, dec={:.4f}'.format(coord.ra.value,
                                                                             coord.dec.value))
            use_coords = None
            while use_coords not in ['y', 'n', 'Y', 'N']:
                use_coords = input('Use these coordinates? [y/n]: ')
            if use_coords in ['y', 'Y']:
                target_params['ra'] = coord.ra.value
                target_params['dec'] = coord.dec.value

        # Enter coords
        while target_params['ra'] is None:
            ra_str = input('Target RA [h m s OR deg]: ')
            try:
                target_params['ra'] = parse_ra(ra_str)
            except Exception:
                print('Invalid input')
        while target_params['dec'] is None:
            dec_str = input('Target Dec [d m s OR deg]: ')
            try:
                target_params['dec'] = parse_dec(dec_str)
            except Exception:
                print('Invalid input')

    # ToO & Rank
    too = None
    while too not in ['y', 'n', 'Y', 'N']:
        too = input('Is the target a ToO (can interupt)? [y/n]: ')
    if too in ['y', 'Y']:
        strategy_params['too'] = 1
        rank_zero = 'None'
        while rank_zero not in ['y', 'n', 'Y', 'N']:
            rank_zero = input('Enter as Rank 0 (higher than GW targets - use with care)? [y/n]: ')
        if rank_zero in ['y', 'Y']:
            target_params['start_rank'] = 0
        else:
            target_params['start_rank'] = 506
    else:
        strategy_params['too'] = 0
        rank_str = 'None'
        while rank_str.lower() not in ['low', 'medium', 'high', 'l', 'm', 'h']:
            rank_str = input('Enter rank [low/medium/high]: ')

        if rank_str.lower() in ['low', 'l']:
            target_params['start_rank'] = 508
        elif rank_str.lower() in ['medium', 'm']:
            target_params['start_rank'] = 507
        elif rank_str.lower() in ['high', 'h']:
            target_params['start_rank'] = 506

    # Valid time & wait time
    daily = None
    while daily not in ['y', 'n', 'Y', 'N']:
        daily = input('Use default cadence (once a night)? [y/n]: ')
    if daily in ['y', 'Y']:
        strategy_params['valid_time'] = -1
        strategy_params['wait_time'] = 1000  # ensures once a night
    else:
        while strategy_params['valid_time'] is None:
            valid_time = input('Time for the pointing to be valid for (minutes, -1=infinite): ')
            try:
                strategy_params['valid_time'] = int(valid_time)
            except Exception:
                print('Invalid input')

        while strategy_params['wait_time'] is None:
            wait_time = input('Time between visits (minutes, can be array, 0=no wait): ')
            try:
                strategy_params['wait_time'] = [int(i) for i in wait_time.split(',')]
            except Exception:
                print('Invalid input')

    # Number to do
    while strategy_params['num_todo'] is None:
        num_todo = input('Number of visits? (-1=infinite): ')
        try:
            strategy_params['num_todo'] = int(num_todo)
        except Exception:
            print('Invalid input')

    # Constraints
    default_cons = None
    while default_cons not in ['y', 'n', 'Y', 'N']:
        string = 'Use default constraints (alt>{}, sunalt<{}, moon<{}, moonsep>{})? [y/n]: '.format(
            params.DEFAULT_MIN_ALT,
            params.DEFAULT_MAX_SUNALT,
            params.DEFAULT_MAX_MOON,
            params.DEFAULT_MIN_MOONSEP,
        )
        default_cons = input(string)
    if default_cons in ['y', 'Y']:
        strategy_params['min_alt'] = params.DEFAULT_MIN_ALT
        strategy_params['max_sunalt'] = -params.DEFAULT_MAX_SUNALT
        strategy_params['max_moon'] = params.DEFAULT_MAX_MOON
        strategy_params['min_moonsep'] = params.DEFAULT_MIN_MOONSEP
    else:
        while strategy_params['min_alt'] is None:
            min_alt = input('Minimum target altitude (degrees): ')
            try:
                strategy_params['min_alt'] = float(min_alt)
            except Exception:
                print('Invalid input')

        while strategy_params['max_sunalt'] is None:
            max_sunalt = input('Maximum Sun altitude (degrees): ')
            try:
                strategy_params['max_sunalt'] = float(max_sunalt)
            except Exception:
                print('Invalid input')

        while strategy_params['max_moon'] not in ['D', 'G', 'B']:
            max_moon = input('Maximum Moon brightness [D/G/B]: ')
            try:
                strategy_params['max_moon'] = max_moon.upper()
            except Exception:
                print('Invalid input')

        while strategy_params['min_moonsep'] is None:
            min_moonsep = input('Minimum seperation from the Moon (degrees): ')
            try:
                strategy_params['min_moonsep'] = float(min_moonsep)
            except Exception:
                print('Invalid input')

    return target_params, strategy_params


def fill_exposure_set():
    """Fill out an exposure set frame with user input."""
    exps_params = {'num_exp': None, 'exptime': None, 'filt': None}

    while exps_params['num_exp'] is None:
        num_exp = input('Number of exposures: ')
        try:
            exps_params['num_exp'] = int(num_exp)
        except Exception:
            print('Invalid input')

    while exps_params['exptime'] is None:
        exptime = input('Exposure time: ')
        try:
            exps_params['exptime'] = int(exptime)
        except Exception:
            print('Invalid input')

    while exps_params['filt'] not in ['L', 'R', 'G', 'B']:
        filt = input('Filter [L/R/G/B]: ')
        try:
            exps_params['filt'] = filt.upper()
        except Exception:
            print('Invalid input')

    return exps_params


def run():
    """Create the targets and add them to the database."""
    print('** Insert pointing into GOTO queue database **')

    # Get Target and Strategy params
    with db.open_session() as session:
        target_params, strategy_params = fill_target(session)

    # Get Exposure Set params
    exposure_sets = []
    more_exposures = True
    while more_exposures is True:
        exps_params = fill_exposure_set()
        exposure_sets.append(exps_params)

        add_more = None
        while add_more not in ['y', 'Y', 'n', 'N']:
            add_more = input('Add another exposure set? [y/n]: ')

        if add_more not in ['y', 'Y']:
            more_exposures = False

    # Add to the database
    with db.open_session() as session:
        # Get default User
        user = db.get_user(session, username='default')

        # Create Target
        target = db.Target(**target_params,
                           user=user,
                           strategy=db.Strategy(**strategy_params),
                           )
        for exps_params in exposure_sets:
            target.exposure_sets.append(db.ExposureSet(**exps_params))

        # Confirm before adding to database
        print('~~ Final check ~~')
        print(target)
        for es in target.exposure_sets:
            print(es)

        confirm = None
        while confirm not in ['y', 'Y', 'n', 'N']:
            confirm = input('Add to the database? [y/n]: ')

        if confirm in ['y', 'Y']:
            db.insert_items(session, [target])
            print('    Inserted into observation database')
        else:
            session.rollback()
            print('    Not inserted')

    print('Done')


if __name__ == '__main__':
    run()
