#!/usr/bin/env python3
"""A script add a mini-survey into the G-TeCS database."""

import argparse
import time

from gtecs.obs import database as db

import numpy as np


TARGET_PARAMS = {'start_rank': 998,
                 }
STRATEGY_PARAMS = {'num_todo': -1,
                   'wait_time': 4320,  # 3 days
                   }
EXPS_PARAMS = [{'num_exp': 3, 'exptime': 60, 'filt': 'L'},
               {'num_exp': 1, 'exptime': 60, 'filt': 'R'},
               {'num_exp': 1, 'exptime': 60, 'filt': 'G'},
               {'num_exp': 1, 'exptime': 60, 'filt': 'B'},
               ]


def get_coords(fov, overlap, centre, area):
    """Define mini-survey tiles centres."""
    step = {}
    for key in ('ra', 'dec'):
        overlap[key] = min(max(overlap[key], 0), 0.9)
        step[key] = fov[key] * (1 - overlap[key])

    side = np.sqrt(area)

    n_tiles = {}
    for key in ('ra', 'dec'):
        n_tiles[key] = int(np.around(side / step[key]))

    tot_tiles = n_tiles['ra'] * n_tiles['dec']
    tot_area = tot_tiles * step['ra'] * step['dec']
    print('Created {} tiles covering {:.0f} sq deg'.format(tot_tiles, tot_area))

    sides = (n_tiles['dec'] - 1) / 2
    decs = np.arange(centre['dec'] - step['dec'] * sides,
                     centre['dec'] + step['dec'] * (sides + 1),
                     step['dec'])[:n_tiles['dec']]

    all_ras = []
    all_decs = []
    for dec in decs:
        sides = (n_tiles['ra'] - 1) / 2
        s = step['ra'] / np.cos(dec * np.pi / 180.)
        ras = np.arange(centre['ra'] - s * sides,
                        centre['ra'] + s * (sides + 1),
                        s)[:n_tiles['ra']]
        for i in range(len(ras)):
            if ras[i] < 0:
                ras[i] = 360 + ras[i]

        all_ras.append(ras)
        all_decs.append([dec] * len(ras))

    all_ras = np.concatenate(all_ras)
    all_decs = np.concatenate(all_decs)
    names = np.arange(len(all_decs)) + 1

    return all_ras, all_decs, names


def run(fov, overlap, centre, area, name):
    """Create the targets and add them to the database."""
    # Create the tile centres
    ras, decs, names = get_coords(fov, overlap, centre, area)

    with db.open_session() as session:
        # Get default User
        user = db.get_user(session, username='default')

        # Create Targets
        targets = []
        print('Creating targets...')
        start = time.time()
        for ra, dec, tile_num in zip(ras, decs, names):
            target_params = TARGET_PARAMS.copy()
            target_params['name'] = '{}_survey_T{}'.format(name, tile_num)
            target_params['ra'] = float(ra)
            target_params['dec'] = float(dec)

            target = db.Target(**target_params,
                               user=user,
                               strategy=db.Strategy(**STRATEGY_PARAMS.copy()),
                               )
            for exps_params in EXPS_PARAMS:
                target.exposure_sets.append(db.ExposureSet(**exps_params))

            targets.append(target)
        print('  took {:.2f} secs'.format(time.time() - start))

        # Add to database
        print('Adding {} targets to database...'.format(len(targets)))
        start = time.time()
        db.insert_items(session, targets)
        print('  took {:.2f} secs'.format(time.time() - start))

    print('Done')


if __name__ == '__main__':
    description = """Create a mini-survey around a given centre."""

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('ra_fov', help='FoV in RA', type=float, default=5.6)
    parser.add_argument('dec_fov', help='FoV in Dec', type=float, default=2.5)
    parser.add_argument('ra_overlap', help='Overlap in RA', type=float, default=0.1)
    parser.add_argument('dec_overlap', help='Overlap in Dec', type=float, default=0.5)
    parser.add_argument('ra_centre', help='Survey centre in RA', type=float)
    parser.add_argument('dec_centre', help='Survey centre in Dec', type=float)
    parser.add_argument('area', help='Sq deg area for the survey to cover', type=float)
    parser.add_argument('name', help='Survey name', type=str)

    args = parser.parse_args()

    fov = {'ra': args.ra_fov, 'dec': args.dec_fov}
    overlap = {'ra': args.ra_overlap, 'dec': args.dec_overlap}
    centre = {'ra': args.ra_centre, 'dec': args.dec_centre}
    area = args.area
    name = args.name

    run(fov, overlap, centre, area, name)
