#!/usr/bin/env python
"""A script add a survey of defined points into the G-TeCS database."""

import argparse
import getpass
import time

import obsdb as db


MP_SETTINGS = {'num_todo': -1,
               'wait_time': 4320,  # 3 days
               'min_time': (60 + 5) * 3,
               'max_sunalt': -12,
               'min_moonsep': 50,
               }

EXP_SETTINGS = {'num_exp': 3,
                'exptime': 60,
                'filt': 'L',
                }


def get_coords_from_file(filename):
    """Define mini-survey tiles centres and ranks."""
    allras = []
    alldecs = []
    ranks = []
    names = []
    with open(filename) as file:
        for i, line in enumerate(file):
            if line[0] == '#':
                continue
            tile, ra, dec, *_ = line.split()
            if i > 800:
                break
            rank = (i - 1) // 100 + 990
            name = 'Galaxy_survey_{}'.format(tile)

            print(name, ra, dec, rank)

            allras.append(ra)
            alldecs.append(dec)
            ranks.append(rank)
            names.append(name)

    return allras, alldecs, ranks, names


def run(filename):
    """Create the mpointings and add them to the database."""
    # Create the tile centres
    ras, decs, ranks, names = get_coords_from_file(filename)

    # Add to the database
    mpointings = []
    with db.open_session() as session:
        # get the User, or make it if it doesn't exist
        try:
            user = db.get_user(session, username='goto')
        except ValueError:
            password = getpass.getpass(prompt="Creating default user - give password: ")
            user = db.User('goto', password, 'GOTO Survey')

        # create Mpointings
        print('Creating mpointings...')
        start = time.time()
        for ra, dec, rank, name in zip(ras, decs, ranks, names):
            mp = db.Mpointing(object_name=name,
                              ra=float(ra),
                              dec=float(dec),
                              start_rank=rank,
                              **MP_SETTINGS,
                              user=user,
                              )

            mp.exposure_sets.append(db.ExposureSet(**EXP_SETTINGS))

            # Create the first Pointing (i.e. preempt the caretaker)
            p = mp.get_next_pointing()
            mp.pointings.append(p)

            mpointings.append(mp)
        print('  took {:.2f} secs'.format(time.time() - start))

        print('Adding {} mpointings to database...'.format(len(mpointings)))
        start = time.time()
        db.insert_items(session, mpointings)
        print('  took {:.2f} secs'.format(time.time() - start))


if __name__ == '__main__':
    description = """Create a mini-survey around a given centre."""

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('file', help="File with tiles", type=str)

    args = parser.parse_args()

    filename = args.file

    run(filename)
