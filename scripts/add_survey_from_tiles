#!/usr/bin/env python3
"""A script add a survey of defined points into the G-TeCS database."""

import argparse
import time

from gtecs.obs import database as db
from gtecs.obs import params


def get_tiles_from_file(filename):
    """Define mini-survey tiles."""
    with open(filename, 'r') as file:
        tiles = []
        for line in file:
            if line[0] == 'T':
                tiles.append(line.split())
    return tiles


def fill_target():
    """Fill out a target frame with user input."""
    target_params = {'name': None,
                     'ra': None,
                     'dec': None,
                     'wait_time': None,
                     'too': False,
                     'start_rank': None,
                     'num_todo': None,
                     'min_time': None,
                     'valid_time': -1,
                     'wait_time': None,
                     'min_alt': params.DEFAULT_MIN_ALT,
                     'max_sunalt': params.DEFAULT_MAX_SUNALT,
                     'max_moon': params.DEFAULT_MAX_MOON,
                     'min_moonsep': params.DEFAULT_MIN_MOONSEP,
                     }

    while target_params['wait_time'] is None:
        wait_time = input('Delay between observations (in days): ')
        try:
            target_params['wait_time'] = float(wait_time) * 24 * 60  # in minutes
        except Exception:
            print('Invalid input')

    while target_params['num_todo'] is None:
        num_todo = input('Number of visits? (-1=infinite): ')
        try:
            target_params['num_todo'] = int(num_todo)
        except Exception:
            print('Invalid input')

    while target_params['start_rank'] is None:
        start_rank = input('Pointing initial rank: ')
        try:
            target_params['start_rank'] = int(start_rank)
        except Exception:
            print('Invalid input')

    while target_params['min_alt'] is None:
        min_alt = input('Minimum altitude limit (degrees): ')
        try:
            target_params['min_alt'] = int(min_alt)
        except Exception:
            print('Invalid input')

    while target_params['max_moon'] not in ['D', 'G', 'B']:
        max_moon = input('Maximum Moon brightness [D/G/B]: ')
        try:
            target_params['max_moon'] = max_moon.upper()
        except Exception:
            print('Invalid input')

    while target_params['min_moonsep'] is None:
        min_moonsep = input('Minimum seperation from the Moon (degrees): ')
        try:
            target_params['min_moonsep'] = int(min_moonsep)
        except Exception:
            print('Invalid input')

    return target_params


def fill_exposure_set():
    """Fill out an exposure set frame with user input."""
    exps_params = {'num_exp': None, 'exptime': None, 'filt': None}

    while exps_params['num_exp'] is None:
        num_exp = input('Number of exposures: ')
        try:
            exps_params['num_exp'] = int(num_exp)
        except Exception:
            print('Invalid input')

    while exps_params['exptime'] is None:
        exptime = input('Exposure time: ')
        try:
            exps_params['exptime'] = int(exptime)
        except Exception:
            print('Invalid input')

    while exps_params['filt'] not in ['L', 'R', 'G', 'B']:
        filt = input('Filter [L/R/G/B]: ')
        try:
            exps_params['filt'] = filt.upper()
        except Exception:
            print('Invalid input')

    return exps_params


def run(filename):
    """Create the targets and add them to the database."""
    # Read tile names from the file
    tiles = get_tiles_from_file(filename)
    print('Read in {} tiles'.format(len(tiles)))

    # Get survey name
    survey_name = input('Survey name: ').replace(' ', '_')

    # Get Target params
    target_params = fill_target()

    # Get ExposureSet params
    exps_params = fill_exposure_set()

    # Calculate mintime
    target_params['min_time'] = (exps_params['exptime'] + 30) * exps_params['num_exp']

    # Add to the database
    with db.open_session() as session:
        # Get default User
        user = db.get_user(session, username='default')

        # Get the current grid from the database
        grid = db.get_current_grid(session)
        print('Using grid "{}"'.format(grid.name))

        # Create or fetch Survey
        survey = session.query(db.Survey).filter(db.Survey.name == survey_name).one_or_none()
        if survey is None:
            print('Creating survey database entry')
            survey = db.Survey(name=survey_name)
        else:
            print('Linking to existing survey:', survey)

        # Create Targets
        targets = []
        print('Creating targets...')
        start = time.time()
        for tile in tiles:
            grid_tile = session.query(db.GridTile).filter(db.GridTile.grid == grid,
                                                          db.GridTile.name == tile,
                                                          ).one_or_none()
            if grid_tile is None:
                print('Could not find tile entry for tile "{}"!'.format(grid_tile))
                continue

            target_params['name'] = survey.name + '_' + grid_tile.name

            target = db.Target(**target_params,
                               user=user,
                               grid_tile=grid_tile,
                               survey=survey,
                               )
            target.exposure_sets.append(db.ExposureSet(**exps_params))

            targets.append(target)

        print('  took {:.2f} secs'.format(time.time() - start))

        # Add to database
        print('Adding {} targets to database...'.format(len(targets)))
        start = time.time()
        db.insert_items(session, targets)
        print('  took {:.2f} secs'.format(time.time() - start))

    print('Done')


if __name__ == '__main__':
    description = """Create a mini-survey from a list of tile names."""

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('file', help='File with tiles', type=str)

    args = parser.parse_args()

    filename = args.file

    run(filename)
