#!/usr/bin/env python
"""A simple script to monitor what's in the GOTO database."""

import sys

from astropy.time import Time

import obsdb as db


def gtxt(text):
    """Print green coloured text."""
    return '\033[32;1m' + str(text) + '\033[0m'


def ytxt(text):
    """Print yellow coloured text."""
    return '\033[33;1m' + str(text) + '\033[0m'


def btxt(text):
    """Print blue coloured text."""
    return '\033[34;1m' + str(text) + '\033[0m'


t = Time.now()

if len(sys.argv) > 1:
    show_all = sys.argv[1] in ['-a', '--all']
else:
    show_all = False

with db.open_session() as session:
    all_pointings = db.get_pointings(session)
    n_all = len(all_pointings)
    n_survey = sum([p.survey is not None for p in all_pointings])
    print("{} points in database - {} targeted and {} survey".format(n_all,
                                                                     n_all - n_survey,
                                                                     n_survey))

    running, _ = db.get_queue(session)
    if running:
        print(ytxt('CURRENTLY OBSERVING: ID %i \n' % running.db_id))
    else:
        print('\n')

    for pointing in all_pointings:
        if show_all or (pointing.survey is None and pointing.status != 'expired'):
            string = '{: <6.0f} | {: >20} | {: >3.0f}{} | {: >6.2f} | {: >6.2f} | {} |'.format(
                pointing.db_id,
                pointing.objectName,
                pointing.rank,
                '!' if pointing.ToO else ' ',
                pointing.ra, pointing.dec,
                pointing.startUTC)

            print(string, end=' ')

            if pointing.status == 'running':
                status = ytxt('RUNNING')
            elif pointing.status == 'completed':
                status = gtxt('completed')
            elif pointing.status == 'pending':
                if t > Time(pointing.startUTC):
                    status = btxt('pending')
                else:
                    wait = Time(pointing.startUTC) - t
                    status = 'upcoming ({:.1f}h)'.format(wait.to('hour').value)
            else:
                status = pointing.status
            print(status, end='\n')

    print("{} points in database - {} targeted and {} survey".format(n_all,
                                                                     n_all - n_survey,
                                                                     n_survey))
