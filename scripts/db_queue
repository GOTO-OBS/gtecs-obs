#!/usr/bin/env python3.6
"""A script to view the current pointing queue."""

import argparse

from astroplan import Observer

from astropy import units as u
from astropy.time import Time

from gtecs import astronomy
from gtecs.scheduler import PointingQueue, import_pointings_from_database
from gtecs.style import boldtxt, gtxt, rtxt, ytxt

import obsdb as db


def run(time, limit):
    """Print the current queue."""
    time.precision = 0
    observer = Observer(astronomy.observatory_location())

    # Get pointings from DB
    pointings = import_pointings_from_database(time, observer)
    if len(pointings) == 0:
        print('No pointings in queue')
        return

    # Create Queue
    queue = PointingQueue(pointings)

    # Calculate prorities
    queue.calculate_priorities(time, observer)

    # Get the pointings, now with extra infomation
    pointing_list = list(queue.pointings)
    pointing_list.sort(key=lambda p: p.priority)

    # Print the pointings
    all_cons = {}
    print('Pointings queue at {} UTC:'.format(time.iso))
    reached_invalid = False
    for pointing in pointing_list[:limit]:
        if pointing.priority > 1000 and not reached_invalid:
            print('----------------')
            reached_invalid = True

        print('{: >6.0f}'.format(pointing.db_id), end=' | ')

        with db.open_session() as session:
            db_pointing = db.get_pointing_by_id(session, pointing.db_id)
            print('{: >30}'.format(db_pointing.object_name), end=' | ')

        if pointing.current:
            print(ytxt('{: >11.6f}'.format(pointing.priority)), end=' | ')
        elif pointing.priority < 1000:
            print(gtxt('{: >11.6f}'.format(pointing.priority)), end=' | ')
        else:
            print(rtxt('{: >11.6f}'.format(pointing.priority)), end=' | ')

        print('{: >6.2f}'.format(pointing.ra), end=' | ')
        print('{: >6.2f}'.format(pointing.dec), end=' | ')

        cons = [(name, valid) for name, valid in zip(pointing.constraint_names, pointing.valid_arr)]
        cons.sort(key=lambda i: i[0])

        for name, valid in cons:
            short_name = ''.join(c for c in name if not c.islower())
            if valid:
                print(gtxt(short_name), end=' ')
            else:
                print(rtxt(short_name), end=' ')
            if name not in all_cons:
                all_cons[name] = short_name

        print(end='\n')
    if limit != -1 and len(pointing_list) > limit:
        print(' ...and {} more'.format(len(pointing_list) - limit))
    print('----------------')

    for name in sorted(all_cons):
        if '_' not in name:
            print('{}={}'.format(boldtxt(all_cons[name]), name), end='  ')

    print(end='\n')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-t', '--time', nargs='?', default=None)
    parser.add_argument('-s', '--sunalt', nargs='?', default=None)
    parser.add_argument('-a', '--all', action="store_true", default=False)
    args = parser.parse_args()

    if args.time:
        time = Time(args.time)
    elif args.sunalt:
        sunalt = float(args.sunalt) * u.deg
        today = astronomy.night_startdate()
        time = astronomy.sunalt_time(today, sunalt,
                                     Time.now() < astronomy.local_midnight(today))
    else:
        time = Time.now()

    if args.all:
        limit = -1
    else:
        limit = 20

    run(time, limit)
