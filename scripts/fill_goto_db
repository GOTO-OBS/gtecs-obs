#!/usr/bin/env python

########################################################################
#                             fill_goto_db                             #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#        G-TeCS script to fill G-TeCS database using GOTO-tile         #
#                 Stuart Littlefair, Sheffield, 2017                   #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################
from __future__ import print_function
import getpass
import sys
import argparse

import gtecs.database as db
import gototile

from sqlalchemy.orm import joinedload
import time
import numpy as np

SURVEY_SETTINGS = dict(objectName='survey',
                       start_rank=999,
                       minAlt=35,
                       minTime=30,
                       maxSunAlt=-12,
                       maxMoon='B',
                       ToO=0,
                       num_repeats=0,
                       intervals=1440,
                       valid_durations=1439)

EXP_SETTINGS = dict(expTime=120,
                    raoff=0.,
                    decoff=0.,
                    numexp=3,
                    typeFlag='SCIENCE',
                    filt='L',
                    binning=1,
                    otaMask=None)


def get_userkey(username, description=''):
    '''Get user key of a user, and create it if it doesn't exit'''

    with db.open_session() as session:
        try:
            user_key = db.get_userkey(session, username)
        except:
            # Create user if it doesn't exist
            prompt = "Creating {} user - give password: ".format(username)
            passwd = getpass.getpass(prompt=prompt)
            db.add_user(session, username, passwd, description)
            session.commit()
            user_key = db.get_userkey(session, username)
    return user_key


def get_tiles(telescope, overlap_frac=0.5, nside=256):
    '''Define survey tiles using GOTO-tile'''
    overlap = {'ra': overlap_frac, 'dec': overlap_frac}

    tiles = gototile.grid.tileallsky(telescope.fov, nside, overlap)
    coords = tiles[2]
    ras, decs = coords.ra.value, coords.dec.value
    names = np.arange(len(coords))+1
    return ras, decs, names


def run(telescope, overlap_frac):
    # Get tiles from GOTO-tile
    ras, decs, names = get_tiles(telescope, overlap_frac)

    # Add to the database
    tiles = []
    mpointings = []
    user_key = get_userkey('goto', 'GOTO Survey')
    with db.open_session() as session:
        # create a Survey
        survey_name = '{}-allsky-{:.1f}'.format(telescope.name.replace('-',''),
                                                overlap_frac)
        survey = db.Survey(name=survey_name)
        session.add(survey)

        # create SurveyTiles
        print('Creating tiles...')
        start = time.time()
        for ra, dec, name in zip(ras, decs, names):
            tile = db.SurveyTile(ra=float(ra), decl=float(dec), name=str(name))
            tile.survey = survey
            tiles.append(tile)
        print('  took {:.2f} secs'.format(time.time()-start))

        print('Adding {} tiles to database...'.format(len(tiles)))
        start = time.time()
        db.insert_items(session, tiles)
        print('  took {:.2f} secs'.format(time.time()-start))

        # create Mpointings
        print('Creating mpointings...')
        start = time.time()
        for ra, dec, tile in zip(ras, decs, tiles):
            mp = db.Mpointing(userKey=user_key,
                              ra=float(ra),
                              decl=float(dec),
                              **SURVEY_SETTINGS)
            mp.surveyID = survey.surveyID
            mp.surveyTileID = tile.tileID
            mp.exposure_sets.append(db.ExposureSet(**EXP_SETTINGS))
            mpointings.append(mp)
        print('  took {:.2f} secs'.format(time.time()-start))

        print('Adding {} mpointings to database...'.format(len(mpointings)))
        start = time.time()
        db.insert_items(session, mpointings)
        print('  took {:.2f} secs'.format(time.time()-start))

        # find the Mpointings that are unscheduled
        unscheduled_mps = session.query(db.Mpointing).filter(
            db.Mpointing.scheduled == 0).options(joinedload('repeats')).all()

        # create first batch of Pointings
        print('Creating pointings...')
        start = time.time()
        pointings = [mp.get_next_pointing() for mp in unscheduled_mps]
        print('  took {:.2f} secs'.format(time.time()-start))

        print('Adding {} pointings to database...'.format(len(pointings)))
        start = time.time()
        db.insert_items(session, pointings)
        print('  took {:.2f} secs'.format(time.time()-start))


if __name__ == '__main__':
    description = """Fill the GOTO observation database with survey tiles."""

    parser = argparse.ArgumentParser(description=description,
                    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('telescope', help="telescope name", default='gn4')
    parser.add_argument('overlap_frac', help="overlap fraction between tiles",
                        type=float, default=0.5)

    args = parser.parse_args()

    if args.telescope.upper() in ['GOTON4', 'GN4']:
        telescope = gototile.telescope.GOTON4()
    elif args.telescope.upper() in ['GOTON8', 'GN8']:
        telescope = gototile.telescope.GOTON8()
    elif args.telescope.upper() in ['GOTOS4', 'GS4']:
        telescope = gototile.telescope.GOTOS4()
    elif args.telescope.upper() in ['GOTOS8', 'GS8']:
        telescope = gototile.telescope.GOTOS8()
    else:
        print('Telescope not supported:', args.telescope)
        sys.exit()

    run(telescope, args.overlap_frac)
