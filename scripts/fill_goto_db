#!/usr/bin/env python

########################################################################
#                             fill_goto_db                             #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#        G-TeCS script to fill G-TeCS database using GOTO-tile         #
#                 Stuart Littlefair, Sheffield, 2017                   #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################
from __future__ import print_function
import getpass

import gtecs.database as db
import gototile

from sqlalchemy.orm import joinedload
import time
import numpy as np


# Create GOTO user if it dosn't exist
with db.open_session() as session:
    try:
        user_key = db.get_userkey(session, 'goto')
    except:
        passwd = getpass.getpass(prompt="Creating 'goto' user - give password: ")
        db.add_user(session, 'goto', passwd, 'GOTO survey')
        session.commit()
        user_key = db.get_userkey(session, 'goto')

survey_settings = dict(userKey=user_key,
                       objectName='survey',
                       start_rank=999,
                       minAlt=35,
                       minTime=30,
                       maxSunAlt=-12,
                       maxMoon='B',
                       ToO=0,
                       num_repeats=0,
                       intervals=1440,
                       valid_durations=1439)

exp_settings = dict(expTime=120,
                    raoff=0.,
                    decoff=0.,
                    numexp=3,
                    typeFlag='SCIENCE',
                    filt='L',
                    binning=1,
                    otaMask=None)


# Create tiles using GOTO-tile
gn4 = gototile.telescope.GOTON4()
fov = gn4.fov
overlap_frac = 0.5
overlap = {'ra': overlap_frac, 'dec': overlap_frac}
survey_name = 'GOTON4-allsky-{:.1f}'.format(overlap_frac)
nside = 256

tiles = gototile.grid.tileallsky(fov, nside, overlap)
coords = tiles[2]
ras, decs = coords.ra.value, coords.dec.value
names = np.arange(len(coords))+1


# Add to the database
tiles = []
mpointings = []
with db.open_session() as session:
    # create a Survey
    survey = db.Survey(name=survey_name)
    session.add(survey)

    # create SurveyTiles
    print('Creating tiles...')
    start = time.time()
    for a, d, name in zip(ras, decs, names):
        tile = db.SurveyTile(ra=float(a), decl=float(d), name=str(name))
        tile.survey = survey
        tiles.append(tile)
    print('  took {:.2f} secs'.format(time.time()-start))

    print('Adding {} tiles to database...'.format(len(tiles)))
    start = time.time()
    db.insert_items(session, tiles)
    print('  took {:.2f} secs'.format(time.time()-start))

    # create Mpointings
    print('Creating mpointings...')
    start = time.time()
    for a, d, t in zip(ras, decs, tiles):
        mp = db.Mpointing(surveyTileID=t.tileID,
                          ra=float(a), decl=float(d), **survey_settings)
        mp.exposure_sets.append(db.ExposureSet(**exp_settings))
        mpointings.append(mp)
    print('  took {:.2f} secs'.format(time.time()-start))

    print('Adding {} mpointings to database...'.format(len(mpointings)))
    start = time.time()
    db.insert_items(session, mpointings)
    print('  took {:.2f} secs'.format(time.time()-start))

    # find the Mpointings that are unscheduled
    unscheduled_mps = session.query(db.Mpointing).filter(
        db.Mpointing.scheduled == 0).options(joinedload('repeats')).all()

    # create first batch of Pointings
    print('Creating pointings...')
    start = time.time()
    pointings = [mp.get_next_pointing() for mp in unscheduled_mps]
    print('  took {:.2f} secs'.format(time.time()-start))

    print('Adding {} pointings to database...'.format(len(pointings)))
    start = time.time()
    db.insert_items(session, pointings)
    print('  took {:.2f} secs'.format(time.time()-start))
