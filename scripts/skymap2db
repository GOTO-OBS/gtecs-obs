#!/usr/bin/env python3
"""A script to approximate what the GOTO sentinel should be doing.

- Read in a LIGO GW skymap
- Split it up into tiles
- Insert those tiles into the GOTO database
"""

import argparse
import os
import time

from astropy.time import Time

from gototile.skymap import SkyMap

from gtecs.obs import database as db


TARGET_PARAMS = {'start_rank': 2,
                 }
STRATEGY_PARAMS = {'num_todo': 5,
                   'wait_time': 1440,
                   }
EXPS_PARAMS = [{'num_exp': 3, 'exptime': 60, 'filt': 'L'}]


def add_to_database(session, db_grid, tiles, event_time, event_name, filename):
    """Add an event and its tiles to the GOTO database."""
    # Get default User
    user = db.get_user(session, username='default')

    # Create Event
    event = db.Event(name=event_name,
                     source='LVC',
                     type='GW',
                     time=Time.now(),
                     )

    # Create Survey
    survey = db.Survey(name=event_name,
                       skymap=filename,
                       grid=db_grid,
                       event=event,
                       )

    # Create Targets
    targets = []
    for tile in tiles:
        # Get tile infomation
        tilename = str(tile['tilename'])
        prob = float(tile['prob'])

        # Find the matched Grid tile
        grid_tile = db.get_grid_tile_by_name(session, db_grid.name, tilename)

        # Create Target
        target_params = TARGET_PARAMS.copy()
        target_params['name'] = '{}_{}'.format(event_name, tilename)
        target_params['weight'] = prob

        target = db.Target(**target_params,
                           user=user,
                           strategy=db.Strategy(**STRATEGY_PARAMS.copy()),
                           grid_tile=grid_tile,
                           survey=survey,
                           event=event,
                           )
        for exps_params in EXPS_PARAMS:
            target.exposure_sets.append(db.ExposureSet(**exps_params))

        targets.append(target)

    # Add to database
    db.insert_items(session, targets)


def run(filename, hp_lim=0.001, n_lim=20):
    """Create the targets and add them to the database."""
    with db.open_session() as session:
        # Get the current grid
        db_grid = db.get_current_grid(session)

        # Create a SkyGrid from the database Grid
        grid = db_grid.skygrid

        # Open skymap and get event details
        print('Loading skymap...')
        skymap = SkyMap.from_fits(filename)
        event_time = skymap.date_det
        event_name = skymap.objid
        print('  loaded event {}'.format(event_name))

        # Apply the skymap to the grid
        print('Getting skymap tiles')
        grid.apply_skymap(skymap)
        tiles = grid.get_table()
        tiles.sort('prob')
        tiles.reverse()
        print('  loaded {} tiles'.format(len(tiles)))

        # Filter out low-priority targets
        print('Filtering to tiles that contain more than {}%'.format(hp_lim * 100))
        hp_mask = tiles['prob'] > hp_lim
        selected_tiles = tiles[hp_mask]
        print('  found {} tiles that cover {:.1f}% of the skymap'.format(
            len(selected_tiles),
            sum(selected_tiles['prob']) / sum(tiles['prob']) * 100))

        # Make sure we always add a minimum number of tiles
        if len(selected_tiles) < n_lim:
            print('Adding {} extra tiles to reach a minimum of {}'.format(
                n_lim - len(selected_tiles), n_lim))
            selected_tiles = tiles[:n_lim]
            print('  found {} tiles that cover {:.1f}% of the skymap'.format(
                len(selected_tiles),
                sum(selected_tiles['prob']) / sum(tiles['prob']) * 100))

        # Insert into the database
        print('Adding {} tiles to the database...'.format(len(selected_tiles)))
        start = time.time()
        add_to_database(session, db_grid, selected_tiles, event_time, event_name, filename)
        print('  took {:.2f} secs'.format(time.time() - start))


if __name__ == '__main__':
    description = """Add targets to the database from a skymap."""

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('filename', help='skymap file')
    parser.add_argument('--priority', help='minimum priority', type=float, default=0.001)
    parser.add_argument('--number', help='minimum number', type=int, default=20)

    args = parser.parse_args()

    filename = os.path.realpath(args.filename)  # unpack relative paths

    run(filename, hp_lim=args.priority, n_lim=args.number)
