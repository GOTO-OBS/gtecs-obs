#!/usr/bin/env python
"""A script to convert GOTO-tile files to G-TeCS database."""

import argparse
from collections import namedtuple

from astropy import units as u
from astropy.time import Time

import obsdb as db


Tile = namedtuple('Tile', 'tel, ra, dec, time, dt, prob, cumprob, rank')


def read_tile_file(filename):
    """Read in GOTO tile ranking file.

    Parameters
    ----------
    filename : str
        The file location

    Returns
    -------
    tile_list : list of `Tile` objects
        list of `Tile` objects containing the tiles found in the event

    event_time : `~astropy.time.Time`
        the time of the GW event, extracted from the tile file

    """
    lines = []
    rank = 1
    tile_list = []

    with open(filename) as f:
        for line in f.readlines():
            if not line.startswith('#'):
                lines.append(line)
            # extract time of event
            if line.startswith('# - comments: '):
                event_time = Time(line[40:65])

        for line in lines[1:]:  # the first line is the header
            tel, ra, dec, time, dt, prob, cumprob = line.split()
            ra = float(ra)
            dec = float(dec)
            time = Time(time)
            dt = float(dt)
            prob = float(prob) / 100.  # decimal prob
            cumprob = float(prob)

            tile = Tile(tel, ra, dec, time, dt, prob, cumprob, rank)
            tile_list.append(tile)
            rank += 1

        return tile_list, event_time


def save_to_dbase(session, tile_list, event_time, event_name):
    """Save tiles to the database."""
    ivo = str(event_time)
    event = db.Event(ivo=ivo, name=event_name, source='skymap')
    session.add(event)

    for tile in tile_list:
        ra = tile.ra
        dec = tile.dec
        prob = tile.prob
        num = tile.rank
        save_single_tile(session, ra, dec, prob, num, event, event_time)


def save_single_tile(session, ra, dec, prob, num, event, event_time):
    """Save a single tile to the database."""
    tile = db.EventTile(ra=ra, dec=dec, probability=prob, event=event)
    session.add(tile)
    save_pointing(session, ra, dec, num, event, event_time, tile)


def save_pointing(session, ra, dec, num, event, event_time, tile):
    """Save a pointing to the database."""
    rank = 2
    minalt = '15'
    sunalt = '-18'
    mintime = '360'
    maxmoon = 'B'
    minmoonsep = 30
    duration = 7 * 24 * u.hour
    start_time = event_time
    stop_time = start_time + duration
    too = 0  # There will be ToO tiles, starting observations aren't

    userkey = db.get_userkey(session, 'goto')

    pointing = db.Pointing(userKey=userkey,
                           objectName='%s T%03i' % (event.name, num),
                           ra=ra,
                           dec=dec,
                           rank=rank,
                           minAlt=minalt,
                           maxSunAlt=sunalt,
                           minTime=mintime,
                           maxMoon=maxmoon,
                           minMoonSep=minmoonsep,
                           startUTC=start_time,
                           stopUTC=stop_time,
                           ToO=too,
                           event=event,
                           eventTile=tile)
    session.add(pointing)

    save_exposure_set(session, pointing)


def save_exposure_set(session, pointing):
    """Save an exposure set to the database."""
    exptime = 120
    numexp = 3
    exptype = 'SCIENCE'
    filt = 'L'
    binfac = 1
    utmask = None
    raoff = 0
    decoff = 0

    exposure_set = db.ExposureSet(expTime=exptime,
                                  numexp=numexp,
                                  typeFlag=exptype,
                                  filt=filt,
                                  binning=binfac,
                                  utMask=utmask,
                                  raoff=raoff,
                                  decoff=decoff,
                                  pointing=pointing)
    session.add(exposure_set)


def run(filename, event_name):
    """Create the pointings and add them to the database."""
    tile_list, event_time = read_tile_file(filename)

    with db.open_session() as session:
        try:
            db.get_userkey(session, 'goto')
        except Exception:
            db.add_user(session, 'goto', 'password', "GOTO alerts")

        save_to_dbase(session, tile_list, event_time, event_name)


if __name__ == '__main__':
    description = """Convert a GOTO-tile output file containing a list of tiles
                     and priorities into observation files for the G-TeCS
                     observation queue."""

    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('filename',
                        help="GOTO tile priority file")

    args = parser.parse_args()

    run(args.filename, event_name='GW00000')
